#!/usr/bin/env python

# IMMS BASe reader


import sys
from imms_sensor_data_pb2 import SensorData
from scl import generate_map
from misc import daemonize
import serial
from time import time
from threading import Timer


def send_pseudo():
   sensor_data = SensorData()
   sensor_data.rssi = -91
   socket.send(sensor_data.SerializeToString())
   #print sensor_data
   global timer
   timer = Timer(1, send_pseudo)
   timer.start()
   

def main(name):
   port = serial.Serial('/dev/ttyUSB4', 38400)
   str = ''
   sensor_data = SensorData()
   while True:
      buf = port.read(32)
      for c in buf:
         if c == '\n':
            try:
               # split string into fields list:
               result = []
               list = str.split(';')[0:-1]
               if len(list) != 9:
                  raise Exception
               # parse fields:
               for i in range(0, 9):
                  item = list[i]
                  if i in [2,3,6]:
                     result.append(float(item) / 100)
                  else:
                     result.append(int(item))
               sensor_data.node_id = result[0]
               sensor_data.count = result[1]
               sensor_data.temperature = result[2]
               sensor_data.humidity = result[3]
               sensor_data.light_par = result[4]
               sensor_data.light_tsr = result[5]
               sensor_data.voltage = result[6]
               sensor_data.rssi = result[7]
               sensor_data.lqi = result[8]
               #print time(), sensor_data
               global timer
               timer.cancel()
               timer = Timer(1, send_pseudo)
               timer.start()
               # send the data:
               socket.send(sensor_data.SerializeToString())
            except:
               pass
            str = ''
         else:
            str += c



name = 'imms_sensor'
socket = generate_map(name)['data']
#print socket
timer = Timer(1, send_pseudo)
timer.start()
main(name)

#daemonize(name, main)

