# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : flight.sm

import statemap


class flightState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def done(self, fsm):
        self.Default(fsm)

    def failed(self, fsm):
        self.Default(fsm)

    def land(self, fsm):
        self.Default(fsm)

    def move(self, fsm):
        self.Default(fsm)

    def rotate(self, fsm):
        self.Default(fsm)

    def stop(self, fsm):
        self.Default(fsm)

    def takeoff(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException, msg

class flight_Default(flightState):
    pass

class flight_Standing(flight_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt._broadcast()
        ctxt._save_power()

    def Default(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt._error()
        finally:
            fsm.setState(endState)

    def takeoff(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt._takeoff_activity()
        finally:
            fsm.setState(flight.taking_off)
            fsm.getState().Entry(fsm)

class flight_Taking_off(flight_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt._broadcast()

    def Default(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt._error()
        finally:
            fsm.setState(endState)

    def done(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(flight.hovering)
        fsm.getState().Entry(fsm)

    def failed(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(flight.standing)
        fsm.getState().Entry(fsm)

class flight_Hovering(flight_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt._broadcast()

    def Default(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt._error()
        finally:
            fsm.setState(endState)

    def land(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt._land_activity()
        finally:
            fsm.setState(flight.landing)
            fsm.getState().Entry(fsm)

    def move(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt._move_activity()
        finally:
            fsm.setState(flight.moving)
            fsm.getState().Entry(fsm)

    def rotate(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt._rotate_activity()
        finally:
            fsm.setState(endState)

class flight_Landing(flight_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt._broadcast()

    def Default(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt._error()
        finally:
            fsm.setState(endState)

    def done(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(flight.standing)
        fsm.getState().Entry(fsm)

class flight_Moving(flight_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt._broadcast()

    def Default(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt._error()
        finally:
            fsm.setState(endState)

    def done(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(flight.hovering)
        fsm.getState().Entry(fsm)

    def move(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt._move_activity()
        finally:
            fsm.setState(flight.moving)
            fsm.getState().Entry(fsm)

    def rotate(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt._rotate_activity()
        finally:
            fsm.setState(endState)

    def stop(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt._stop_activity()
        finally:
            fsm.setState(flight.stopping)
            fsm.getState().Entry(fsm)

class flight_Stopping(flight_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt._broadcast()

    def Default(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt._error()
        finally:
            fsm.setState(endState)

    def done(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(flight.hovering)
        fsm.getState().Entry(fsm)

class flight(object):

    standing = flight_Standing('flight.Standing', 0)
    taking_off = flight_Taking_off('flight.Taking_off', 1)
    hovering = flight_Hovering('flight.Hovering', 2)
    landing = flight_Landing('flight.Landing', 3)
    moving = flight_Moving('flight.Moving', 4)
    stopping = flight_Stopping('flight.Stopping', 5)
    Default = flight_Default('flight.Default', -1)

class flight_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, flight.standing)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
