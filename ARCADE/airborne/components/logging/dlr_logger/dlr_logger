#!/usr/bin/env python

import sys
import zmq
from kalman_pb2 import KalmanData
from gps_data_pb2 import GpsData
from zmq_ipc import generate_map
from time import sleep, time
from threading import Thread, Event
from named_daemon import daemonize
from mission import HLSM_Reader
import os.path


class KalmanReader(Thread):

   """
   reads kalman-filtered GPS positions
   """

   def __init__(self, socket):
      Thread.__init__(self)
      self.daemon = True
      self.socket = socket
      self.event = Event()

   def run(self):
      while True:
         data = KalmanData()
         data.ParseFromString(self.socket.recv())
         self.data = data
         self.event.set()


class GPSReader(Thread):

   """
   reads GPS Data
   """

   def __init__(self, socket):
      Thread.__init__(self)
      self.daemon = True
      self.socket = socket
      self.event = Event()

   def run(self):
      while True:
         data = GpsData()
         data.ParseFromString(self.socket.recv())
         self.data = data
         self.event.set()


class Writer(Thread):

   def __init__(self, name):
      Thread.__init__(self)
      self.daemon = True
      self.name = name

   def run(self):
      map = generate_map(self.name)
      print map
      sleep(20)
      kalman_reader = KalmanReader(map['kalman'])
      gps_reader = NetworksReader(map['gps'])
      hlsm_reader = HLSM_Reader(map['hlsm'])
      hlsm_reader.daemon = True
      hlsm_reader.start()
      count = 0
      while True:
         fname = '/tmp/gps_kalman_hlsm_%d.txt' % count
         if not os.path.exists(fname):
            break
      logfile = open('/tmp/gps_kalman_hlsm.txt', 'w')
      last_state = None
      while True:
         kalman_reader.event.wait()
         kalman_reader.event.clear()
         gps_reader.event.wait()
         gps_reader.event.clear()
         tstamp = time()
         if last_state != hlsm_reader.state:
            logfile.write("%s\n" % hlsm_reader.state);
         for network in networks_reader.data.networks:
            logfile.write('%f %f %f %f %f\n' % (tstamp, kalman_reader.data.lon, kalman_reader.data.lat, gps_reader.data.lon, gps_reader.data.lat))
         logfile.flush()


def main(name):
   writer = Writer(name)
   writer.run()

daemonize('dlr_logger', main)

